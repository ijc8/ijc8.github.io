
(async function () {
    function base64ToBuffer(base64) {
        return Uint8Array.from(atob(base64), c => c.charCodeAt(0)).buffer
    }
    const encrypted = base64ToBuffer("")
    const rawKey = new URLSearchParams(window.location.search).get("key")
    const key = await window.crypto.subtle.importKey(
        "raw",
        base64ToBuffer(rawKey),
        { name: "AES-GCM" },
        false,
        ["decrypt"]
    )
    const decrypted = await window.crypto.subtle.decrypt({ name: "AES-GCM", iv: base64ToBuffer("uJ8G87SI5R33H3Le") }, key, encrypted)
    const src = new TextDecoder("utf-8").decode(new Uint8Array(decrypted))
    eval(src)
    document.body.querySelector("input[name='key']").value = rawKey
})()
