{"mappings":"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","sources":["worklet.ts"],"sourcesContent":["// Unfortunately, % in JS can return negative values.\nfunction mod(a, b) {\n  const r = a % b\n  return r < 0 ? r + b : r\n}\nfunction lerp(buffer, i) {\n  const fracIndex = mod(i, buffer.length)\n  const prevIndex = Math.floor(fracIndex)\n  const nextIndex = (prevIndex + 1) % buffer.length\n  const frac = fracIndex - prevIndex\n  return buffer[prevIndex] * (1 - frac) + buffer[nextIndex] * frac\n}\n\nclass Cycle extends AudioWorkletProcessor {\n  buffer = new Float32Array(1)\n  index = 0\n  phase = 0\n  loop = true\n  interp = \"linear\"\n  lastIndex = null\n\n  scale = \"linear\"\n  gain = 2\n  offset = -1\n\n  static get parameterDescriptors() {\n    return [{\n      name: \"trigger\",\n      defaultValue: 0,\n      automationRate: \"a-rate\",\n    },\n    {\n      name: \"amp\",\n      defaultValue: 1,\n      automationRate: \"a-rate\",\n    },\n    {\n      name: \"frequency\",\n      defaultValue: 0,\n      automationRate: \"a-rate\",\n    }]\n  }\n\n  setScale(type: \"linear\" | \"log\", min: number, max: number) {\n    this.scale = type\n    if (type === \"linear\") {\n      this.offset = min\n      this.gain = max - min\n    } else {\n      this.offset = Math.log(min)\n      this.gain = Math.log(max) - this.offset\n    }\n  }\n\n  constructor() {\n    super()\n\n    this.port.onmessage = (e) => {\n      if (e.data.buffer !== undefined) {\n        this.buffer = e.data.buffer\n      } else if (e.data.interp !== undefined) {\n        this.interp = e.data.interp\n      } else if (e.data.loop !== undefined) {\n        this.loop = e.data.loop\n      } else if (e.data.scale !== undefined) {\n        const { type, min, max } = e.data.scale\n        this.setScale(type, min, max)\n      }\n    }\n  }\n\n  process(inputs, outputs, parameters) {\n    const inputAmp = parameters.amp\n    const frequency = parameters.frequency\n    const trigger = parameters.trigger\n\n    const output = outputs[0][0]\n    const phaseOut = outputs[1][0]\n\n    const gain = this.gain\n    const offset = this.offset\n    const loop = this.loop\n    const buffer = this.buffer\n    const logScale = this.scale === \"log\"\n    const linearInterp = this.interp === \"linear\"\n\n    let phase = this.phase\n    let index = this.index\n    let lastIndex = this.lastIndex\n\n    for (let i = 0; i < output.length; i++) {\n      if (trigger[i % trigger.length] !== 0) {\n        phase = 0\n      }\n\n      phaseOut[i] = phase\n      let out\n      if (linearInterp) {\n        out = lerp(buffer, phase * buffer.length)\n      } else {\n        const index = phase * buffer.length\n        if (Math.floor(index) === Math.floor(lastIndex)) {\n          out = 0\n        } else {\n          const delta = index - lastIndex\n          const intIndex = ((delta > 0 || delta < -buffer.length / 2) && delta < buffer.length / 2) ? Math.floor(index) : Math.floor(lastIndex)\n          out = buffer[intIndex]\n        }\n        lastIndex = index\n      }\n\n      output[i] = (out + 1) / 2 * gain + offset\n      if (logScale) output[i] = Math.exp(output[i])\n      output[i] *= inputAmp[i % inputAmp.length]\n\n      phase += frequency[i % frequency.length] / sampleRate\n      if (phase > 1) {\n        if (loop) phase %= 1\n        else phase = 1\n      }\n    }\n    this.lastIndex = lastIndex\n    this.index = index\n    this.phase = phase\n    return true\n  }\n}\n\nregisterProcessor(\"cycle\", Cycle)\n"],"names":["$35cf4536b41d32cc$var$lerp","buffer","i","fracIndex","a","b","r","$35cf4536b41d32cc$var$mod","length","prevIndex","Math","floor","nextIndex","frac","$35cf4536b41d32cc$var$Cycle","AudioWorkletProcessor","parameterDescriptors","name","defaultValue","automationRate","setScale","type","min","max","this","scale","offset","gain","log","super","Float32Array","index","phase","loop","interp","lastIndex","port","onmessage","e","undefined","data","process","inputs","outputs","parameters","inputAmp","amp","frequency","trigger","output","phaseOut","logScale","linearInterp","out","delta","exp","sampleRate","registerProcessor"],"version":3,"file":"worklet.be1dcd4b.js.map"}